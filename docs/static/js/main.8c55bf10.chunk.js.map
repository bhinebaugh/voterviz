{"version":3,"sources":["components/StateMatchUp.js","App.js","serviceWorker.js","index.js"],"names":["StateMatchUp","_ref","stateName","year","voteData","voteTotal","reduce","acc","value","votes","react_default","a","createElement","className","toLocaleString","map","result","key","id","name","parties","join","width","height","viewBox","fill","x","y","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleStateShown","stateAbbr","state","shown","indexOf","shortenedList","filter","item","setState","concat","toConsumableArray","toggleYear","componentDidMount","resultsPromises","sourceFiles","results","file","fetch","then","response","json","rawdata","objectSpread","defineProperty","nestedResults","flattened","keys","forEach","stateKey","stateResult","candidateKey","push","reformatData","Promise","all","values","res","dataset","years","stateAbbrevs","_this2","byState","stateAbbrev","toString","type","checked","onChange","components_StateMatchUp","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8c55bf10.chunk.js","sourcesContent":["import React from 'react';\n\nimport './state-match-up.css';\n\nconst StateMatchUp = ({stateName, year, voteData}) => {\n    var voteTotal = voteData.reduce( (acc,value) => acc + value.votes, 0 )\n    return (\n    <div className=\"panel state\">\n        <header>\n            <h2>{stateName}<span>{year}</span></h2>\n            <p>\n                {voteTotal.toLocaleString()} votes cast\n            </p>\n        </header>\n        {voteData.map( result => \n            <li className=\"candidate\" key={result.id+result.name}>\n                <div className={ \"candidate-details \" + (result.votes > voteTotal/2 ? \"winner\" : \"\") }>\n                    <p className=\"person-name\">{result.name}</p>\n                    <p className=\"party-name\">{result.parties.join(',')}\n                    </p>\n                </div>\n                <div className=\"votes\">\n                    <svg width=\"100\" height=\"20\" viewBox=\"0 0 100 20\">\n                        <rect \n                            fill=\"#874dc5\"\n                            x=\"0\" y=\"0\" \n                            width={100*result.votes/voteTotal+\"%\"} \n                            height=\"10\" \n                        />\n                    </svg><br/>\n                    {result.votes.toLocaleString()} votes\n                </div>\n            </li>\n        )}\n    </div>\n    )\n}\n\nexport default StateMatchUp","import React, { } from 'react';\n//import StateMatchUps from './components/StateMatchUps';\nimport StateMatchUp from './components/StateMatchUp';\nimport './App.css';\n\n// for each year (from separate JSON files),\n// take each object (which will be a state's results),\n// and add its objects (a unique candidate-state-year unit)\n// to a single, flat array\nfunction reformatData(nestedResults) {\n  var flattened = [];\n  Object.keys(nestedResults).forEach(stateKey => {\n    let stateResult = nestedResults[stateKey];\n    Object.keys(stateResult).forEach(candidateKey => \n      flattened.push(stateResult[candidateKey])\n    )\n  });\n  return flattened;\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.sourceFiles = {\n      parties: ['parties_2004', 'parties_2008', 'parties_2012'], // unnused\n      results: ['results_2004', 'results_2008', 'results_2012']\n    }\n    this.years = [2004, 2008, 2012];\n    this.stateAbbrevs = [\n      \"AL\", \"AK\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\"\n    ]\n    this.state = {\n      shown: [],\n      year: 2004,\n      rawdata: {},\n      dataset: []\n    }\n  }\n\n  toggleStateShown = (stateAbbr) => {\n    let position = this.state.shown.indexOf(stateAbbr);\n    if (position > -1) {\n      let shortenedList = this.state.shown.filter(item => item !== stateAbbr);\n      this.setState({ shown: shortenedList })\n    } else {\n      this.setState({ shown: [...this.state.shown, stateAbbr]})\n    }\n  }\n\n  toggleYear = (year) => {\n    this.setState({ year: year });\n  }\n\n  componentDidMount = () => {\n    var resultsPromises = this.sourceFiles.results.map( file =>\n      fetch('data/'+file+'.json')\n        .then( response => response.json() )\n        .then( json => {\n          this.setState({\n            rawdata: {\n              ...this.state.rawdata,\n              [file]: json\n            }\n          });\n          return reformatData(json)\n        }\n)\n    )\n    Promise.all(resultsPromises)\n      .then(values => {\n        return values.reduce(\n          (acc,res) => acc.concat(res),[]\n        )\n      })\n      .then(result => this.setState({ dataset: result }))\n  }\n  \n  render() {\n    let year = this.state.year;\n    this.byState = this.state.shown.map( stateAbbrev => {\n      let results = this.state.dataset.filter( result => result.id === year.toString() + \"_\" + stateAbbrev )\n      return {\n        name: stateAbbrev,\n        year: year,\n        results: results\n      }\n    })\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>U.S. Presidential Elections</h1>\n        </header>\n        <div id=\"filters\">\n          <fieldset id=\"year\">\n            <legend>Select election year</legend>\n            {this.years.map(year =>\n              <label>\n                <input type=\"radio\"\n                  name=\"year\"\n                  value={year}\n                  checked={year===this.state.year}\n                  onChange={() => this.toggleYear(year)}\n                />{year}\n              </label>\n            )}\n          </fieldset>\n          <fieldset id=\"states\">\n            <legend>Select states to show details for</legend>\n            {this.stateAbbrevs.map( stateAbbrev => \n              <label>\n                <input type=\"checkbox\" name={stateAbbrev} onChange={() => this.toggleStateShown(stateAbbrev)} />\n                {stateAbbrev}\n              </label>\n            )}\n          </fieldset>\n        </div>\n        <ul>\n          {this.byState.map((state) =>\n            <StateMatchUp stateName={state.name} year={state.year} voteData={state.results} /> )\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}